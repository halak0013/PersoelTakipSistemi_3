/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.panels;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;

import constants.Constantas;
import langs.LangM;
import sql.DbHelper;

/**
 *
 * @author bismih
 */
public class Chart extends javax.swing.JPanel {

    String[] chartList = {"networkManeger", "projectManeger", "softwareEngineer", "admin", "designer",
        "financeManeger", "socialMediaManeger"};
    String[] chartListName = {LangM.chartsocialMediaManeger, LangM.chartfinanceManeger, LangM.chartdesigner, LangM.chartadmin,
        LangM.chartsoftwareEngineer, LangM.chartprojectManeger, LangM.chartnetworkManeger};
    double max = 0.1;
    int[] y = new int[chartList.length];

    /**
     * Creates new form Chart
     */
    public Chart() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;
        //resmi yumuşatmak için
        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        //yazıyı yumuşatmak için
        g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_HRGB);
        for (int i = 0; i < chartList.length; i++) {
            y[i] = (int) DbHelper.getSqlRowCount("status='" + chartList[i] + "'");
            if (y[i] > max) {
                max = y[i];
            }
        }
        int heightRatio=(int)((getHeight()-2)/max);

        //g2.rotate(Math.toRadians(180.0), getWidth() / 2, getHeight() / 2);
        for (int i = 0; i < chartList.length; i++) {
            System.out.println(y[i]*heightRatio);
            g2.setColor(new Color((int)(Math.random()*255),(int)(Math.random()*255),(int)(Math.random()*255)));
            g2.fillRect(50+i*100, 30, 40, y[i]*heightRatio);
            g2.drawString(chartListName[chartList.length-i-1],35+ i*100, 10);
        }

        int val=(getHeight()-40)/4;
        double val2=max/4.0;
        for (int i = 0; i < 5; i++) {
            g2.setColor(Constantas.txNormalColor());
            g2.drawString((val2*i)+"", 0, i*val+40);
        }

    }

//    protected void paintComponent(Graphics g) {
//        super.paintComponent(g);
//        Graphics2D g2 = (Graphics2D) g;
//        //resmi yumuşatmak için
//        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
//        //yazıyı yumuşatmak için
//        g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_HRGB);
//        g2.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 17));
//        int size = map.size();
//        int space = 5;
//        int itemHeight = ((getHeight() - ((space * size) + 1)) / size);
//        int y = space;
//        //sağda 300lük boşluk oluşsun
//        int maxWidth = getWidth() - 300;
//
//        for (ChartItems item : map.values()) {
//            g2.setColor(item.getColor());
//            double width = item.getValues() * maxWidth / maxValue;
//            g2.fillRect(5, y, (int) width, itemHeight);
//            paintIcon(g2, item, (int) width + 10, y, itemHeight);
//            y += itemHeight + space;
//
//        }
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
